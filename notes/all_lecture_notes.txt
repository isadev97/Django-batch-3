5th Aug, 2023 (Saturday)

https://code.visualstudio.com/
https://www.postman.com/
https://dbeaver.io/
https://git-scm.com/
https://github.com/
https://render.com/

commands
pwd => print working directory
cd => change directory
ls => print files and folder inside the directory
mkdir => make directory is used to create a directory
clear
touch is used to create a file
vim
cat
head
tail
rm 
rmdir
find
mv
cp

python3 -m venv project_env
source project_env/scripts/activate using git bash
or 
source project_env/bin/activate

pip3 install django

django-admin startproject my_project .

env manage.py my_project/settings.py

python3 manage.py runserver

Aug 6, 2023 (Sunday)

python3 manage.py startapp persons_app
git config --list
git config --global user.email ""
git config --global user.name ""
touch .gitignore

local repo git status => git add =>  git commit => git push

date_of_birth = DateTimeField()
name = TextField() / CharField()
roll_number = IntegerField()
is_agreed = BooleanField()

(project_env) administrator@GFG19213-LAPTOP:~/Desktop/batch3$ python3 manage.py showmigrations persons_app
persons_app
 (no migrations)
(project_env) administrator@GFG19213-LAPTOP:~/Desktop/batch3$ python3 manage.py makemigrations persons_app
Migrations for 'persons_app':
  persons_app/migrations/0001_initial.py
    - Create model Person
(project_env) administrator@GFG19213-LAPTOP:~/Desktop/batch3$ python3 manage.py migrate persons_app


Aug 12 Saturday, 2023

models.py define a model
migrations/ create a migratin file
django_migrations table it maintains the record of migration file

python3 manage.py createsuperuser
python3 manage.py inspect db > models.txt 
python3 manage.py shell 

REPL
R- READ
E - Evaluate
P - Print
L - Loop

Django Models   ORM    DB

python way of writing sql queries this is independent of DB engine 

A queryset is an array of objects 

(project_env) administrator@GFG19213-LAPTOP:~/Desktop/batch3$ python3 manage.py shell
Python 3.8.10 (default, May 26 2023, 14:05:08) 
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from person_app.models import Person
Traceback (most recent call last):
  File "<console>", line 1, in <module>
ModuleNotFoundError: No module named 'person_app'
>>> from persons_app.models import Person
>>> Person
<class 'persons_app.models.Person'>
>>> all_persons = Person.objects.all()
>>> all_persons
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>]>
>>> print(all_persons.query)
SELECT "persons_app_person"."id", "persons_app_person"."name", "persons_app_person"."age" FROM "persons_app_person"
>>> Person.objects.count()
2
>>> qs = Person.objects.count()
>>> print(qs.query)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'int' object has no attribute 'query'
>>> qs = Person.objects.all().count()
>>> print(qs.query)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'int' object has no attribute 'query'
>>> qs = Person.objects.all().count()
>>> qs
2
>>> new_person = Person.objects.create(name="Joe", age=20)
>>> new_person
<Person: Person object (3)>
>>> new_person = Person.objects.get(name="ishjot")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/administrator/Desktop/batch3/project_env/lib/python3.8/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/administrator/Desktop/batch3/project_env/lib/python3.8/site-packages/django/db/models/query.py", line 637, in get
    raise self.model.DoesNotExist(
persons_app.models.Person.DoesNotExist: Person matching query does not exist.
>>> new_person = Person.objects.get(name="Ishjot")
>>> new_person
<Person: Person object (1)>
>>> new_person.name
'Ishjot'
>>> new_person.age
25
>>> new_person.__dict__
{'_state': <django.db.models.base.ModelState object at 0x7f4a0c244070>, 'id': 1, 'name': 'Ishjot', 'age': 25}
>>> qs = Person.objects.filter(age__lte=25)
>>> print(qs.query)
SELECT "persons_app_person"."id", "persons_app_person"."name", "persons_app_person"."age" FROM "persons_app_person" WHERE "persons_app_person"."age" <= 25
>>> qs
<QuerySet [<Person: Person object (1)>, <Person: Person object (3)>]>
>>> qs
<QuerySet [<Person: Person object (1)>, <Person: Person object (3)>]>
>>> print(qs.count())
2
>>> qs.first()
<Person: Person object (1)>
>>> qs.last()
<Person: Person object (3)>
>>> instance = qs.first()
>>> instance.name
'Ishjot'
>>> instance.age
25
>>> qs = Person.objects.filter(name__icontains="ish")
>>> print(qs.query)
SELECT "persons_app_person"."id", "persons_app_person"."name", "persons_app_person"."age" FROM "persons_app_person" WHERE "persons_app_person"."name" LIKE %ish% ESCAPE '\'
>>> qs
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>]>
>>> qs = Person.objects.filter(name__icontains="ish").values_list("name", flat=True)
>>> qs
<QuerySet ['Ishjot', 'ishjot2']>
>>> qs = Person.objects.filter(name="Ishjot")
>>> qs
<QuerySet [<Person: Person object (1)>]>
>>> qs.distinct()
<QuerySet [<Person: Person object (1)>]>
>>> qs1 = Persono.objects.filter(name__icontains="ish")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Persono' is not defined
>>> qs1 = Person.objects.filter(name__icontains="ish")
>>> qs1
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>]>
>>> qs2 = Person.objects.filter(age__gte=20)
>>> qs
<QuerySet [<Person: Person object (1)>]>
>>> qs2 = Person.objects.filter(age__gt=20)
>>> qs2
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>]>
>>> qs2 = Person.objects.filter(age__gte=20)
>>> print(qs2.query)
SELECT "persons_app_person"."id", "persons_app_person"."name", "persons_app_person"."age" FROM "persons_app_person" WHERE "persons_app_person"."age" >= 20
>>> qs2 = Person.objects.all().filter(age__gte=20)
>>> qs2
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>, <Person: Person object (3)>]>
>>> qs1
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>]>
>>> qs2
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>, <Person: Person object (3)>]>
>>> qs3 = qs1 | qs2
>>> qs3
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>, <Person: Person object (3)>]>
>>> qs3 = qs1 & qs2
>>> qs3
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>]>
>>> qs2 = Person.objects.all().filter(age__gte=20, name__icontains="ish")
>>> qs2
<QuerySet [<Person: Person object (1)>, <Person: Person object (2)>]>
>>> print(qs2.query)
SELECT "persons_app_person"."id", "persons_app_person"."name", "persons_app_person"."age" FROM "persons_app_person" WHERE ("persons_app_person"."age" >= 20 AND "persons_app_person"."name" LIKE %ish% ESCAPE '\')
>>> 

Aug 13, 2023 Sunday 
JSON - javascript object notation



JSON stands for JavaScript Object Notation

JSON is a lightweight format for storing and transporting data

JSON is often used when data is sent from a server to a web page

JSON is "self-describing" and easy to understand

for key in object you have a value 

Json object => {
  "name": "Ishjot",
  "age": 25,
  "profile": "SDE",
  "location": {
    "country": "India",
    "city": "Delhi"
  }
}